/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.wdp.connect.common.sdk.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.wdp.connect.common.sdk.api.models.ConnectionProperties;
import com.ibm.wdp.connect.common.sdk.api.models.CustomFlightAssetField;
import com.ibm.wdp.connect.common.sdk.api.models.DiscoveredAssetDetails;
import com.ibm.wdp.connect.common.sdk.api.models.DiscoveredAssetExtendedMetadataProperty;
import com.ibm.wdp.connect.common.sdk.api.models.DiscoveredAssetInteractionProperties;
import com.ibm.wdp.connect.common.sdk.api.models.DiscoveredAssetType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Result of the ListFlights RPC method from a custom Arrow Flight service.
 */
@Schema(description = "Result of the ListFlights RPC method from a custom Arrow Flight service.")

public class CustomFlightAssetDescriptor {
  @JsonProperty("id")
  @SerializedName("id")
  private String id = null;

  @JsonProperty("asset_type")
  @SerializedName("asset_type")
  private DiscoveredAssetType assetType = null;

  @JsonProperty("name")
  @SerializedName("name")
  private String name = null;

  @JsonProperty("description")
  @SerializedName("description")
  private String description = null;

  @JsonProperty("tags")
  @SerializedName("tags")
  private List<String> tags = null;

  @JsonProperty("path")
  @SerializedName("path")
  private String path = null;

  @JsonProperty("has_children")
  @SerializedName("has_children")
  private Boolean hasChildren = null;

  @JsonProperty("details")
  @SerializedName("details")
  private DiscoveredAssetDetails details = null;

  @JsonProperty("interaction_properties")
  @SerializedName("interaction_properties")
  private DiscoveredAssetInteractionProperties interactionProperties = null;

  @JsonProperty("extended_metadata")
  @SerializedName("extended_metadata")
  private List<DiscoveredAssetExtendedMetadataProperty> extendedMetadata = null;

  @JsonProperty("datasource_type_name")
  @SerializedName("datasource_type_name")
  private String datasourceTypeName = null;

  @JsonProperty("connection_properties")
  @SerializedName("connection_properties")
  private ConnectionProperties connectionProperties = null;

  @JsonProperty("batch_size")
  @SerializedName("batch_size")
  private Integer batchSize = null;

  @JsonProperty("partition_count")
  @SerializedName("partition_count")
  private Integer partitionCount = null;

  @JsonProperty("partition_index")
  @SerializedName("partition_index")
  private Integer partitionIndex = null;

  @JsonProperty("fields")
  @SerializedName("fields")
  private List<CustomFlightAssetField> fields = null;

  public CustomFlightAssetDescriptor id(String id) {
    this.id = id;
    return this;
  }

   /**
   * An ID for the asset.
   * @return id
  **/
  @Schema(description = "An ID for the asset.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CustomFlightAssetDescriptor assetType(DiscoveredAssetType assetType) {
    this.assetType = assetType;
    return this;
  }

   /**
   * Get assetType
   * @return assetType
  **/
  @Schema(description = "")
  public DiscoveredAssetType getAssetType() {
    return assetType;
  }

  public void setAssetType(DiscoveredAssetType assetType) {
    this.assetType = assetType;
  }

  public CustomFlightAssetDescriptor name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A name for the asset.
   * @return name
  **/
  @Schema(description = "A name for the asset.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CustomFlightAssetDescriptor description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the asset.
   * @return description
  **/
  @Schema(description = "A description of the asset.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CustomFlightAssetDescriptor tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public CustomFlightAssetDescriptor addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags associated with the asset.
   * @return tags
  **/
  @Schema(description = "Tags associated with the asset.")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public CustomFlightAssetDescriptor path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The path for the object which can be used to discover child assets.
   * @return path
  **/
  @Schema(description = "The path for the object which can be used to discover child assets.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public CustomFlightAssetDescriptor hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

   /**
   * True if it is known that the asset has children. False if it is known that the asset does not have children. If it is not known, or it is too expensive to determine this, then this property will not be returned.
   * @return hasChildren
  **/
  @Schema(description = "True if it is known that the asset has children. False if it is known that the asset does not have children. If it is not known, or it is too expensive to determine this, then this property will not be returned.")
  public Boolean isHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }

  public CustomFlightAssetDescriptor details(DiscoveredAssetDetails details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @Schema(description = "")
  public DiscoveredAssetDetails getDetails() {
    return details;
  }

  public void setDetails(DiscoveredAssetDetails details) {
    this.details = details;
  }

  public CustomFlightAssetDescriptor interactionProperties(DiscoveredAssetInteractionProperties interactionProperties) {
    this.interactionProperties = interactionProperties;
    return this;
  }

   /**
   * Get interactionProperties
   * @return interactionProperties
  **/
  @Schema(description = "")
  public DiscoveredAssetInteractionProperties getInteractionProperties() {
    return interactionProperties;
  }

  public void setInteractionProperties(DiscoveredAssetInteractionProperties interactionProperties) {
    this.interactionProperties = interactionProperties;
  }

  public CustomFlightAssetDescriptor extendedMetadata(List<DiscoveredAssetExtendedMetadataProperty> extendedMetadata) {
    this.extendedMetadata = extendedMetadata;
    return this;
  }

  public CustomFlightAssetDescriptor addExtendedMetadataItem(DiscoveredAssetExtendedMetadataProperty extendedMetadataItem) {
    if (this.extendedMetadata == null) {
      this.extendedMetadata = new ArrayList<>();
    }
    this.extendedMetadata.add(extendedMetadataItem);
    return this;
  }

   /**
   * Extended metadata properties
   * @return extendedMetadata
  **/
  @Schema(description = "Extended metadata properties")
  public List<DiscoveredAssetExtendedMetadataProperty> getExtendedMetadata() {
    return extendedMetadata;
  }

  public void setExtendedMetadata(List<DiscoveredAssetExtendedMetadataProperty> extendedMetadata) {
    this.extendedMetadata = extendedMetadata;
  }

  public CustomFlightAssetDescriptor datasourceTypeName(String datasourceTypeName) {
    this.datasourceTypeName = datasourceTypeName;
    return this;
  }

   /**
   * The unique name of the custom Arrow Flight data source type.
   * @return datasourceTypeName
  **/
  @Schema(description = "The unique name of the custom Arrow Flight data source type.")
  public String getDatasourceTypeName() {
    return datasourceTypeName;
  }

  public void setDatasourceTypeName(String datasourceTypeName) {
    this.datasourceTypeName = datasourceTypeName;
  }

  public CustomFlightAssetDescriptor connectionProperties(ConnectionProperties connectionProperties) {
    this.connectionProperties = connectionProperties;
    return this;
  }

   /**
   * Get connectionProperties
   * @return connectionProperties
  **/
  @Schema(description = "")
  public ConnectionProperties getConnectionProperties() {
    return connectionProperties;
  }

  public void setConnectionProperties(ConnectionProperties connectionProperties) {
    this.connectionProperties = connectionProperties;
  }

  public CustomFlightAssetDescriptor batchSize(Integer batchSize) {
    this.batchSize = batchSize;
    return this;
  }

   /**
   * The batch size.
   * @return batchSize
  **/
  @Schema(description = "The batch size.")
  public Integer getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }

  public CustomFlightAssetDescriptor partitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
    return this;
  }

   /**
   * The partition count.
   * @return partitionCount
  **/
  @Schema(description = "The partition count.")
  public Integer getPartitionCount() {
    return partitionCount;
  }

  public void setPartitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
  }

  public CustomFlightAssetDescriptor partitionIndex(Integer partitionIndex) {
    this.partitionIndex = partitionIndex;
    return this;
  }

   /**
   * The partition index.
   * @return partitionIndex
  **/
  @Schema(description = "The partition index.")
  public Integer getPartitionIndex() {
    return partitionIndex;
  }

  public void setPartitionIndex(Integer partitionIndex) {
    this.partitionIndex = partitionIndex;
  }

  public CustomFlightAssetDescriptor fields(List<CustomFlightAssetField> fields) {
    this.fields = fields;
    return this;
  }

  public CustomFlightAssetDescriptor addFieldsItem(CustomFlightAssetField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Asset fields
   * @return fields
  **/
  @Schema(description = "Asset fields")
  public List<CustomFlightAssetField> getFields() {
    return fields;
  }

  public void setFields(List<CustomFlightAssetField> fields) {
    this.fields = fields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFlightAssetDescriptor customFlightAssetDescriptor = (CustomFlightAssetDescriptor) o;
    return Objects.equals(this.id, customFlightAssetDescriptor.id) &&
        Objects.equals(this.assetType, customFlightAssetDescriptor.assetType) &&
        Objects.equals(this.name, customFlightAssetDescriptor.name) &&
        Objects.equals(this.description, customFlightAssetDescriptor.description) &&
        Objects.equals(this.tags, customFlightAssetDescriptor.tags) &&
        Objects.equals(this.path, customFlightAssetDescriptor.path) &&
        Objects.equals(this.hasChildren, customFlightAssetDescriptor.hasChildren) &&
        Objects.equals(this.details, customFlightAssetDescriptor.details) &&
        Objects.equals(this.interactionProperties, customFlightAssetDescriptor.interactionProperties) &&
        Objects.equals(this.extendedMetadata, customFlightAssetDescriptor.extendedMetadata) &&
        Objects.equals(this.datasourceTypeName, customFlightAssetDescriptor.datasourceTypeName) &&
        Objects.equals(this.connectionProperties, customFlightAssetDescriptor.connectionProperties) &&
        Objects.equals(this.batchSize, customFlightAssetDescriptor.batchSize) &&
        Objects.equals(this.partitionCount, customFlightAssetDescriptor.partitionCount) &&
        Objects.equals(this.partitionIndex, customFlightAssetDescriptor.partitionIndex) &&
        Objects.equals(this.fields, customFlightAssetDescriptor.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, assetType, name, description, tags, path, hasChildren, details, interactionProperties, extendedMetadata, datasourceTypeName, connectionProperties, batchSize, partitionCount, partitionIndex, fields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFlightAssetDescriptor {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    interactionProperties: ").append(toIndentedString(interactionProperties)).append("\n");
    sb.append("    extendedMetadata: ").append(toIndentedString(extendedMetadata)).append("\n");
    sb.append("    datasourceTypeName: ").append(toIndentedString(datasourceTypeName)).append("\n");
    sb.append("    connectionProperties: ").append(toIndentedString(connectionProperties)).append("\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    partitionCount: ").append(toIndentedString(partitionCount)).append("\n");
    sb.append("    partitionIndex: ").append(toIndentedString(partitionIndex)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
