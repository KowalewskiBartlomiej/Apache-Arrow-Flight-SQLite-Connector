/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.wdp.connect.common.sdk.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.wdp.connect.common.sdk.api.models.CustomDatasourceTypeProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Definitions of the properties that are supported for a custom Arrow Flight data source.
 */
@Schema(description = "Definitions of the properties that are supported for a custom Arrow Flight data source.")

public class CustomFlightDatasourceTypeProperties {
  @JsonProperty("connection")
  @SerializedName("connection")
  private List<CustomDatasourceTypeProperty> connection = null;

  @JsonProperty("source")
  @SerializedName("source")
  private List<CustomDatasourceTypeProperty> source = null;

  @JsonProperty("target")
  @SerializedName("target")
  private List<CustomDatasourceTypeProperty> target = null;

  @JsonProperty("filter")
  @SerializedName("filter")
  private List<CustomDatasourceTypeProperty> filter = null;

  public CustomFlightDatasourceTypeProperties connection(List<CustomDatasourceTypeProperty> connection) {
    this.connection = connection;
    return this;
  }

  public CustomFlightDatasourceTypeProperties addConnectionItem(CustomDatasourceTypeProperty connectionItem) {
    if (this.connection == null) {
      this.connection = new ArrayList<>();
    }
    this.connection.add(connectionItem);
    return this;
  }

   /**
   * The connection properties.
   * @return connection
  **/
  @Schema(description = "The connection properties.")
  public List<CustomDatasourceTypeProperty> getConnection() {
    return connection;
  }

  public void setConnection(List<CustomDatasourceTypeProperty> connection) {
    this.connection = connection;
  }

  public CustomFlightDatasourceTypeProperties source(List<CustomDatasourceTypeProperty> source) {
    this.source = source;
    return this;
  }

  public CustomFlightDatasourceTypeProperties addSourceItem(CustomDatasourceTypeProperty sourceItem) {
    if (this.source == null) {
      this.source = new ArrayList<>();
    }
    this.source.add(sourceItem);
    return this;
  }

   /**
   * The properties that can be set for a source interaction.
   * @return source
  **/
  @Schema(description = "The properties that can be set for a source interaction.")
  public List<CustomDatasourceTypeProperty> getSource() {
    return source;
  }

  public void setSource(List<CustomDatasourceTypeProperty> source) {
    this.source = source;
  }

  public CustomFlightDatasourceTypeProperties target(List<CustomDatasourceTypeProperty> target) {
    this.target = target;
    return this;
  }

  public CustomFlightDatasourceTypeProperties addTargetItem(CustomDatasourceTypeProperty targetItem) {
    if (this.target == null) {
      this.target = new ArrayList<>();
    }
    this.target.add(targetItem);
    return this;
  }

   /**
   * The properties that can be set for a target interaction.
   * @return target
  **/
  @Schema(description = "The properties that can be set for a target interaction.")
  public List<CustomDatasourceTypeProperty> getTarget() {
    return target;
  }

  public void setTarget(List<CustomDatasourceTypeProperty> target) {
    this.target = target;
  }

  public CustomFlightDatasourceTypeProperties filter(List<CustomDatasourceTypeProperty> filter) {
    this.filter = filter;
    return this;
  }

  public CustomFlightDatasourceTypeProperties addFilterItem(CustomDatasourceTypeProperty filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<>();
    }
    this.filter.add(filterItem);
    return this;
  }

   /**
   * The filter properties that can be set for a discovery interaction.
   * @return filter
  **/
  @Schema(description = "The filter properties that can be set for a discovery interaction.")
  public List<CustomDatasourceTypeProperty> getFilter() {
    return filter;
  }

  public void setFilter(List<CustomDatasourceTypeProperty> filter) {
    this.filter = filter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFlightDatasourceTypeProperties customFlightDatasourceTypeProperties = (CustomFlightDatasourceTypeProperties) o;
    return Objects.equals(this.connection, customFlightDatasourceTypeProperties.connection) &&
        Objects.equals(this.source, customFlightDatasourceTypeProperties.source) &&
        Objects.equals(this.target, customFlightDatasourceTypeProperties.target) &&
        Objects.equals(this.filter, customFlightDatasourceTypeProperties.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connection, source, target, filter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFlightDatasourceTypeProperties {\n");
    
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
