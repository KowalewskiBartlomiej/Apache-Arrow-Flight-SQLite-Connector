/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.wdp.connect.common.sdk.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.wdp.connect.common.sdk.api.models.ConnectionProperties;
import com.ibm.wdp.connect.common.sdk.api.models.DiscoveryConfiguration;
import com.ibm.wdp.connect.common.sdk.api.models.DiscoveryFilters;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The body of a request to the ListFlights RPC method of a custom Arrow Flight service.
 */
@Schema(description = "The body of a request to the ListFlights RPC method of a custom Arrow Flight service.")

public class CustomFlightAssetsCriteria {
  @JsonProperty("datasource_type_name")
  @SerializedName("datasource_type_name")
  private String datasourceTypeName = null;

  @JsonProperty("connection_properties")
  @SerializedName("connection_properties")
  private ConnectionProperties connectionProperties = null;

  @JsonProperty("path")
  @SerializedName("path")
  private String path = null;

  @JsonProperty("discovery_properties")
  @SerializedName("discovery_properties")
  private DiscoveryConfiguration discoveryProperties = null;

  @JsonProperty("filters")
  @SerializedName("filters")
  private DiscoveryFilters filters = null;

  @JsonProperty("offset")
  @SerializedName("offset")
  private Integer offset = null;

  @JsonProperty("limit")
  @SerializedName("limit")
  private Integer limit = null;

  @JsonProperty("extended_metadata")
  @SerializedName("extended_metadata")
  private Boolean extendedMetadata = null;

  @JsonProperty("detail")
  @SerializedName("detail")
  private Boolean detail = null;

  @JsonProperty("context")
  @SerializedName("context")
  private String context = null;

  public CustomFlightAssetsCriteria datasourceTypeName(String datasourceTypeName) {
    this.datasourceTypeName = datasourceTypeName;
    return this;
  }

   /**
   * The unique name of the custom Arrow Flight data source type.
   * @return datasourceTypeName
  **/
  @Schema(description = "The unique name of the custom Arrow Flight data source type.")
  public String getDatasourceTypeName() {
    return datasourceTypeName;
  }

  public void setDatasourceTypeName(String datasourceTypeName) {
    this.datasourceTypeName = datasourceTypeName;
  }

  public CustomFlightAssetsCriteria connectionProperties(ConnectionProperties connectionProperties) {
    this.connectionProperties = connectionProperties;
    return this;
  }

   /**
   * Get connectionProperties
   * @return connectionProperties
  **/
  @Schema(description = "")
  public ConnectionProperties getConnectionProperties() {
    return connectionProperties;
  }

  public void setConnectionProperties(ConnectionProperties connectionProperties) {
    this.connectionProperties = connectionProperties;
  }

  public CustomFlightAssetsCriteria path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The path of the asset.
   * @return path
  **/
  @Schema(description = "The path of the asset.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public CustomFlightAssetsCriteria discoveryProperties(DiscoveryConfiguration discoveryProperties) {
    this.discoveryProperties = discoveryProperties;
    return this;
  }

   /**
   * Get discoveryProperties
   * @return discoveryProperties
  **/
  @Schema(description = "")
  public DiscoveryConfiguration getDiscoveryProperties() {
    return discoveryProperties;
  }

  public void setDiscoveryProperties(DiscoveryConfiguration discoveryProperties) {
    this.discoveryProperties = discoveryProperties;
  }

  public CustomFlightAssetsCriteria filters(DiscoveryFilters filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @Schema(description = "")
  public DiscoveryFilters getFilters() {
    return filters;
  }

  public void setFilters(DiscoveryFilters filters) {
    this.filters = filters;
  }

  public CustomFlightAssetsCriteria offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * The number of assets to skip before returning results.
   * @return offset
  **/
  @Schema(description = "The number of assets to skip before returning results.")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public CustomFlightAssetsCriteria limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The limit of the number of assets to return.
   * @return limit
  **/
  @Schema(description = "The limit of the number of assets to return.")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public CustomFlightAssetsCriteria extendedMetadata(Boolean extendedMetadata) {
    this.extendedMetadata = extendedMetadata;
    return this;
  }

   /**
   * Whether to return extended metadata details.
   * @return extendedMetadata
  **/
  @Schema(description = "Whether to return extended metadata details.")
  public Boolean isExtendedMetadata() {
    return extendedMetadata;
  }

  public void setExtendedMetadata(Boolean extendedMetadata) {
    this.extendedMetadata = extendedMetadata;
  }

  public CustomFlightAssetsCriteria detail(Boolean detail) {
    this.detail = detail;
    return this;
  }

   /**
   * Whether to return additional asset-specific details.
   * @return detail
  **/
  @Schema(description = "Whether to return additional asset-specific details.")
  public Boolean isDetail() {
    return detail;
  }

  public void setDetail(Boolean detail) {
    this.detail = detail;
  }

  public CustomFlightAssetsCriteria context(String context) {
    this.context = context;
    return this;
  }

   /**
   * Whether assets are discovered for the purpose of reading (source) or writing (target).
   * @return context
  **/
  @Schema(description = "Whether assets are discovered for the purpose of reading (source) or writing (target).")
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFlightAssetsCriteria customFlightAssetsCriteria = (CustomFlightAssetsCriteria) o;
    return Objects.equals(this.datasourceTypeName, customFlightAssetsCriteria.datasourceTypeName) &&
        Objects.equals(this.connectionProperties, customFlightAssetsCriteria.connectionProperties) &&
        Objects.equals(this.path, customFlightAssetsCriteria.path) &&
        Objects.equals(this.discoveryProperties, customFlightAssetsCriteria.discoveryProperties) &&
        Objects.equals(this.filters, customFlightAssetsCriteria.filters) &&
        Objects.equals(this.offset, customFlightAssetsCriteria.offset) &&
        Objects.equals(this.limit, customFlightAssetsCriteria.limit) &&
        Objects.equals(this.extendedMetadata, customFlightAssetsCriteria.extendedMetadata) &&
        Objects.equals(this.detail, customFlightAssetsCriteria.detail) &&
        Objects.equals(this.context, customFlightAssetsCriteria.context);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasourceTypeName, connectionProperties, path, discoveryProperties, filters, offset, limit, extendedMetadata, detail, context);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFlightAssetsCriteria {\n");
    
    sb.append("    datasourceTypeName: ").append(toIndentedString(datasourceTypeName)).append("\n");
    sb.append("    connectionProperties: ").append(toIndentedString(connectionProperties)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    discoveryProperties: ").append(toIndentedString(discoveryProperties)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    extendedMetadata: ").append(toIndentedString(extendedMetadata)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
