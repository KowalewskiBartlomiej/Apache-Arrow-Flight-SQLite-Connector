/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.wdp.connect.common.sdk.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.wdp.connect.common.sdk.api.models.DatasourceTypePropertyValues;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Definition of a data source property for a custom datasource type.
 */
@Schema(description = "Definition of a data source property for a custom datasource type.")

public class CustomDatasourceTypeProperty {
  @JsonProperty("name")
  @SerializedName("name")
  private String name = null;

  /**
   * The type of the property.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BOOLEAN("boolean"),
    ENUM("enum"),
    INTEGER("integer"),
    STRING("string");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @JsonProperty("type")
  @SerializedName("type")
  private TypeEnum type = null;

  @JsonProperty("label")
  @SerializedName("label")
  private String label = null;

  @JsonProperty("description")
  @SerializedName("description")
  private String description = null;

  @JsonProperty("placeholder")
  @SerializedName("placeholder")
  private String placeholder = null;

  @JsonProperty("required")
  @SerializedName("required")
  private Boolean required = null;

  @JsonProperty("masked")
  @SerializedName("masked")
  private Boolean masked = null;

  @JsonProperty("multiline")
  @SerializedName("multiline")
  private Boolean multiline = null;

  @JsonProperty("default_value")
  @SerializedName("default_value")
  private String defaultValue = null;

  @JsonProperty("values")
  @SerializedName("values")
  private List<DatasourceTypePropertyValues> values = null;

  @JsonProperty("group")
  @SerializedName("group")
  private String group = null;

  public CustomDatasourceTypeProperty name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The property name.
   * @return name
  **/
  @Schema(description = "The property name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CustomDatasourceTypeProperty type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the property.
   * @return type
  **/
  @Schema(description = "The type of the property.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CustomDatasourceTypeProperty label(String label) {
    this.label = label;
    return this;
  }

   /**
   * The label for the property.
   * @return label
  **/
  @Schema(description = "The label for the property.")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public CustomDatasourceTypeProperty description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description for the property.
   * @return description
  **/
  @Schema(description = "The description for the property.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CustomDatasourceTypeProperty placeholder(String placeholder) {
    this.placeholder = placeholder;
    return this;
  }

   /**
   * An example value for the property.
   * @return placeholder
  **/
  @Schema(description = "An example value for the property.")
  public String getPlaceholder() {
    return placeholder;
  }

  public void setPlaceholder(String placeholder) {
    this.placeholder = placeholder;
  }

  public CustomDatasourceTypeProperty required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Whether the property is required.
   * @return required
  **/
  @Schema(description = "Whether the property is required.")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public CustomDatasourceTypeProperty masked(Boolean masked) {
    this.masked = masked;
    return this;
  }

   /**
   * Whether the property should be masked. For example, when the property is a password.
   * @return masked
  **/
  @Schema(description = "Whether the property should be masked. For example, when the property is a password.")
  public Boolean isMasked() {
    return masked;
  }

  public void setMasked(Boolean masked) {
    this.masked = masked;
  }

  public CustomDatasourceTypeProperty multiline(Boolean multiline) {
    this.multiline = multiline;
    return this;
  }

   /**
   * Whether the property should be displayed in a multi-line field.
   * @return multiline
  **/
  @Schema(description = "Whether the property should be displayed in a multi-line field.")
  public Boolean isMultiline() {
    return multiline;
  }

  public void setMultiline(Boolean multiline) {
    this.multiline = multiline;
  }

  public CustomDatasourceTypeProperty defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value for the property if the value is not otherwise specified.
   * @return defaultValue
  **/
  @Schema(description = "The default value for the property if the value is not otherwise specified.")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public CustomDatasourceTypeProperty values(List<DatasourceTypePropertyValues> values) {
    this.values = values;
    return this;
  }

  public CustomDatasourceTypeProperty addValuesItem(DatasourceTypePropertyValues valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * If the property type is enum, the list of enumerated values that the property can take.
   * @return values
  **/
  @Schema(description = "If the property type is enum, the list of enumerated values that the property can take.")
  public List<DatasourceTypePropertyValues> getValues() {
    return values;
  }

  public void setValues(List<DatasourceTypePropertyValues> values) {
    this.values = values;
  }

  public CustomDatasourceTypeProperty group(String group) {
    this.group = group;
    return this;
  }

   /**
   * A classification group for the property.
   * @return group
  **/
  @Schema(description = "A classification group for the property.")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDatasourceTypeProperty customDatasourceTypeProperty = (CustomDatasourceTypeProperty) o;
    return Objects.equals(this.name, customDatasourceTypeProperty.name) &&
        Objects.equals(this.type, customDatasourceTypeProperty.type) &&
        Objects.equals(this.label, customDatasourceTypeProperty.label) &&
        Objects.equals(this.description, customDatasourceTypeProperty.description) &&
        Objects.equals(this.placeholder, customDatasourceTypeProperty.placeholder) &&
        Objects.equals(this.required, customDatasourceTypeProperty.required) &&
        Objects.equals(this.masked, customDatasourceTypeProperty.masked) &&
        Objects.equals(this.multiline, customDatasourceTypeProperty.multiline) &&
        Objects.equals(this.defaultValue, customDatasourceTypeProperty.defaultValue) &&
        Objects.equals(this.values, customDatasourceTypeProperty.values) &&
        Objects.equals(this.group, customDatasourceTypeProperty.group);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, label, description, placeholder, required, masked, multiline, defaultValue, values, group);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDatasourceTypeProperty {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    masked: ").append(toIndentedString(masked)).append("\n");
    sb.append("    multiline: ").append(toIndentedString(multiline)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
