/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ibm.wdp.connect.common.sdk.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * An asset type definition.
 */
@Schema(description = "An asset type definition.")

public class DiscoveredAssetType {
  @JsonProperty("type")
  @SerializedName("type")
  private String type = null;

  @JsonProperty("dataset")
  @SerializedName("dataset")
  private Boolean dataset = null;

  @JsonProperty("dataset_container")
  @SerializedName("dataset_container")
  private Boolean datasetContainer = null;

  public DiscoveredAssetType type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The name of the asset type.
   * @return type
  **/
  @Schema(description = "The name of the asset type.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DiscoveredAssetType dataset(Boolean dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * Whether the asset can be a source of data or whether it can be written to. To illustrate by example, a database table is a data set, but a schema is not. Likewise, a file is a data set, but a folder/directory is not.
   * @return dataset
  **/
  @Schema(description = "Whether the asset can be a source of data or whether it can be written to. To illustrate by example, a database table is a data set, but a schema is not. Likewise, a file is a data set, but a folder/directory is not.")
  public Boolean isDataset() {
    return dataset;
  }

  public void setDataset(Boolean dataset) {
    this.dataset = dataset;
  }

  public DiscoveredAssetType datasetContainer(Boolean datasetContainer) {
    this.datasetContainer = datasetContainer;
    return this;
  }

   /**
   * Whether an asset can be created in this asset. To illustrate by example, a schema is a data set container, as is a folder/directory.
   * @return datasetContainer
  **/
  @Schema(description = "Whether an asset can be created in this asset. To illustrate by example, a schema is a data set container, as is a folder/directory.")
  public Boolean isDatasetContainer() {
    return datasetContainer;
  }

  public void setDatasetContainer(Boolean datasetContainer) {
    this.datasetContainer = datasetContainer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveredAssetType discoveredAssetType = (DiscoveredAssetType) o;
    return Objects.equals(this.type, discoveredAssetType.type) &&
        Objects.equals(this.dataset, discoveredAssetType.dataset) &&
        Objects.equals(this.datasetContainer, discoveredAssetType.datasetContainer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, dataset, datasetContainer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveredAssetType {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    datasetContainer: ").append(toIndentedString(datasetContainer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
